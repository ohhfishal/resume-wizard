package components

import (
	"fmt"
	"github.com/ohhfishal/resume-wizard/db"
	"time"
)

const (
	UploadFileKey = "file"
	NameKey       = "name"
)

const (
	EventResumeUploaded     = "resumeUploaded"
	EventApplicationsUpdate = "applicationsUpdate"
)

const (
	ResumeEditorID = "resumeEditor"
)

templ MainPage(resumes []db.Resume, applications []db.Application) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Resume Wizard</title>
			<link rel="stylesheet" href="assets/styles/default.css"/>
			<script src="https://cdn.jsdelivr.net/npm/htmx.org@2.0.6/dist/htmx.min.js" integrity="sha384-Akqfrbj/HpNVo8k11SXBb6TlBWmXXlYQrCSqEWmyKJe+hDm3Z/B2WVG4smwBkRVm" crossorigin="anonymous"></script>
			@ThemeScript()
			@TabScript()
			@CompileResumeScript()
		</head>
		<body>
			<div class="container">
				<div class="header">
					<h1>Resume Wizard</h1>
					<p>Keep track of your job applications and their status</p>
					@ThemeButton()
				</div>
				<div class="tabs">
					<button class="tab-button" data-tab="resumes-tab">Resumes</button>
					<button class="tab-button active" data-tab="applications-tab">Applications</button>
				</div>
				<div id="resumes-tab" class="tab-content">
					@ResumeForm()
					@EditResumeForm(resumes)
				</div>
				<div id="applications-tab" class="tab-content">
					@ApplicationForm(ApplicationFormProps{
						Resumes: resumes,
					})
					@ApplicationsTable(resumes, applications)
					@Modal(ModalProps{
						Resumes: resumes,
					})
				</div>
			</div>
			@ModalScript()
		</body>
	</html>
}

templ ResumeForm() {
	<div class="form-section">
		<h2>Upload Resume</h2>
		<form
			id="resumeForm"
			hx-post="/resume"
			hx-encoding="multipart/form-data"
			hx-swap="none"
			hx-on::after-request="if(event.detail.successful) this.reset()"
		>
			<div class="form-grid">
				<div class="form-group">
					<label for="resumeName">Resume Name</label>
					<input type="text" id="resumeName" name="name" placeholder="e.g., Software Engineer" required/>
				</div>
				<div class="form-group">
					<label for="resumeFile">Resume File</label>
					<input type="file" id="resumeFile" name="file" accept=".yaml,.json" required/>
				</div>
			</div>
			<button type="submit" class="btn">Upload Resume</button>
		</form>
	</div>
}

templ EditResumeForm(resumes []db.Resume) {
	<div class="form-section">
		<h2>Edit Resume</h2>
		// TODO: Do I need hx-encoding='multipart/form-data' 
		<form
			id="resumeForm"
			hx-put="/resume"
			hx-swap="none"
		>
			<div class="form-grid">
				@ResumeDropdown(resumes, ResumeEditorID)
			</div>
			<div id={ ResumeEditorID }>
				<span>TODO: </span> Have this be a loading thing
			</div>
		</form>
	</div>
}

templ ResumeEditor(resume db.Resume) {
	if resume.ID == -1 {
		<div></div>
	} else {
		<form
			class="editor-container"
			hx-put={ fmt.Sprintf("/resume/%d", resume.ID) }
			hx-swap="none"
		>
			<textarea
				name="resume"
				id="yamlEditor"
				class="editor"
				placeholder="Write YAML here"
				spellcheck="false"
			>
				{ resume.Body.YAML() }
			</textarea>
			<button type="submit" class="btn">Upload Resume</button>
		</form>
	}
}

templ ApplicationsTable(resumes []db.Resume, applications []db.Application) {
	{{
	// TODO: I don't know if this should stay here
	mapping := map[int64]string{}
	for _, resume := range resumes {
		mapping[resume.ID] = resume.Name
	}

	refreshTrigger := EventApplicationsUpdate + " from:body"
	}}
	<div class="table-section" hx-swap="outerHTML" hx-get="/components/applicationsTable" hx-trigger={ refreshTrigger }>
		<h2>Your Applications</h2>
		<div class="table-container">
			<table id="applicationsTable">
				<thead>
					<tr>
						<th>Resume</th>
						<th></th>
						<th>Company</th>
						<th>Position</th>
						<th>Status</th>
						<th>Applied Date</th>
					</tr>
				</thead>
				<tbody id="applicationsBody">
					if len(applications) == 0 {
						<tr>
							<td colspan="5" class="empty-state">
								// TODO: Add a nice litle image
								<p>No applications found. Add your first application above!</p>
							</td>
						</tr>
					}
					for _, application := range applications {
						<tr onclick={ templ.JSFuncCall("openApplicationModal", application) }>
							if name, ok := mapping[application.ResumeID]; ok {
								<td>
									<p>{ name }</p>
								</td>
								<td>
									<div>
										@ViewResumeButton(application.ResumeID)
									</div>
								</td>
							} else {
								<td>Unknown Resume</td>
								<td></td>
							}
							<td>{ application.Company }</td>
							<td>{ application.Position }</td>
							<td><span class={ "status " + application.Status }>{ application.Status }</span></td>
							// TODO: Improve formatting of time
							<td>{ application.CreatedAt.Format(time.DateOnly) }</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ ThemeButton() {
	<button class="theme-toggle" title="Toggle theme"></button>
}

templ ThemeScript() {
	<script>
    const ThemeManager = {
        getCurrentTheme() {
            return localStorage.getItem('theme') || 'light';
        },
        
        applyTheme(theme) {
            document.documentElement.setAttribute('data-theme', theme);
            localStorage.setItem('theme', theme);
        },
        
        toggleTheme() {
            const currentTheme = this.getCurrentTheme();
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            this.applyTheme(newTheme);
        },
        
        init() {
            this.applyTheme(this.getCurrentTheme());
        }
    };

    document.addEventListener('DOMContentLoaded', function() {
        ThemeManager.init();
    });

    document.addEventListener('click', function(e) {
        if (e.target.matches('.theme-toggle') || e.target.closest('.theme-toggle')) {
            e.preventDefault();
            ThemeManager.toggleTheme();
        }
    });
  </script>
}

templ TabScript() {
	<script>
    const TabManager = {
        getCurrentTab() {
            return localStorage.getItem('tab') || 'resumes-tab';
        },

        init() {
            this.showTab(this.getCurrentTab());
        },

        showTab(tabId) {
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            
            const targetTab = document.getElementById(tabId);
            if (targetTab) {
                targetTab.classList.add('active');
            }
            
            const targetButton = document.querySelector(`[data-tab="${tabId}"]`);
            if (targetButton) {
                targetButton.classList.add('active');
            }
            localStorage.setItem('tab', tabId);
        }
    };

    document.addEventListener('DOMContentLoaded', function() {
        TabManager.init();
    });

    document.addEventListener('click', function(e) {
        if (e.target.matches('.tab-button')) {
            e.preventDefault();
            const tabId = e.target.getAttribute('data-tab');
            TabManager.showTab(tabId);
        }
    });
  </script>
}
