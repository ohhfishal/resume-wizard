// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/ohhfishal/resume-wizard/resume"
)

const addResumeToSession = `-- name: AddResumeToSession :exec
UPDATE sessions 
SET resume = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE uuid = ? AND user_id = ? AND deleted_at IS NULL
`

type AddResumeToSessionParams struct {
	Resume *resume.Resume `json:"resume"`
	Uuid   string         `json:"uuid"`
	UserID int64          `json:"user_id"`
}

func (q *Queries) AddResumeToSession(ctx context.Context, arg AddResumeToSessionParams) error {
	_, err := q.db.ExecContext(ctx, addResumeToSession, arg.Resume, arg.Uuid, arg.UserID)
	return err
}

const createApplication = `-- name: CreateApplication :one
INSERT INTO applications (
    user_id,
    base_resume_id,
    company,
    position,
    description,
    resume,
    status
) VALUES (
    ?, ?, ?, ?, ?, ?, 'pending'
) RETURNING id, user_id, base_resume_id, company, position, description, resume, status, applied_at, created_at, updated_at, deleted_at
`

type CreateApplicationParams struct {
	UserID       int64          `json:"user_id"`
	BaseResumeID int64          `json:"base_resume_id"`
	Company      string         `json:"company"`
	Position     string         `json:"position"`
	Description  string         `json:"description"`
	Resume       *resume.Resume `json:"resume"`
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, createApplication,
		arg.UserID,
		arg.BaseResumeID,
		arg.Company,
		arg.Position,
		arg.Description,
		arg.Resume,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BaseResumeID,
		&i.Company,
		&i.Position,
		&i.Description,
		&i.Resume,
		&i.Status,
		&i.AppliedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createSession = `-- name: CreateSession :one

INSERT INTO sessions (
  uuid,
  base_resume_id,
  user_id,
  company,
  position,
  description,
  resume -- TODO: Think this can be removed
) VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING uuid, base_resume_id, user_id, company, position, description, resume, created_at, updated_at, deleted_at
`

type CreateSessionParams struct {
	Uuid         string         `json:"uuid"`
	BaseResumeID int64          `json:"base_resume_id"`
	UserID       int64          `json:"user_id"`
	Company      string         `json:"company"`
	Position     string         `json:"position"`
	Description  string         `json:"description"`
	Resume       *resume.Resume `json:"resume"`
}

// Last used??
// Create a session of a user working on an application
func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.Uuid,
		arg.BaseResumeID,
		arg.UserID,
		arg.Company,
		arg.Position,
		arg.Description,
		arg.Resume,
	)
	var i Session
	err := row.Scan(
		&i.Uuid,
		&i.BaseResumeID,
		&i.UserID,
		&i.Company,
		&i.Position,
		&i.Description,
		&i.Resume,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getApplications = `-- name: GetApplications :many
SELECT id, user_id, base_resume_id, company, position, description, resume, status, applied_at, created_at, updated_at, deleted_at from applications
WHERE user_id = ? AND deleted_at IS NULL
`

func (q *Queries) GetApplications(ctx context.Context, userID int64) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, getApplications, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Application{}
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BaseResumeID,
			&i.Company,
			&i.Position,
			&i.Description,
			&i.Resume,
			&i.Status,
			&i.AppliedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBaseResume = `-- name: GetBaseResume :one
SELECT id, user_id, name, resume, created_at, updated_at, last_used, deleted_at from base_resumes
WHERE user_id = ? AND id = ?
`

type GetBaseResumeParams struct {
	UserID int64 `json:"user_id"`
	ID     int64 `json:"id"`
}

func (q *Queries) GetBaseResume(ctx context.Context, arg GetBaseResumeParams) (BaseResume, error) {
	row := q.db.QueryRowContext(ctx, getBaseResume, arg.UserID, arg.ID)
	var i BaseResume
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Resume,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsed,
		&i.DeletedAt,
	)
	return i, err
}

const getBaseResumes = `-- name: GetBaseResumes :many
SELECT id, user_id, name, resume, created_at, updated_at, last_used, deleted_at from base_resumes
WHERE user_id = ?
ORDER BY created_at
`

func (q *Queries) GetBaseResumes(ctx context.Context, userID int64) ([]BaseResume, error) {
	rows, err := q.db.QueryContext(ctx, getBaseResumes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BaseResume{}
	for rows.Next() {
		var i BaseResume
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Resume,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastUsed,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSession = `-- name: GetSession :one
SELECT uuid, base_resume_id, user_id, company, position, description, resume, created_at, updated_at, deleted_at FROM sessions
WHERE uuid = ? AND user_id = ? AND deleted_at IS NULL
`

type GetSessionParams struct {
	Uuid   string `json:"uuid"`
	UserID int64  `json:"user_id"`
}

// Get a session (user space)
func (q *Queries) GetSession(ctx context.Context, arg GetSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSession, arg.Uuid, arg.UserID)
	var i Session
	err := row.Scan(
		&i.Uuid,
		&i.BaseResumeID,
		&i.UserID,
		&i.Company,
		&i.Position,
		&i.Description,
		&i.Resume,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertBase = `-- name: InsertBase :one
INSERT INTO base_resumes (user_id, name, resume)
VALUES (?, ?, ?)
RETURNING id, user_id, name, resume, created_at, updated_at, last_used, deleted_at
`

type InsertBaseParams struct {
	UserID int64          `json:"user_id"`
	Name   string         `json:"name"`
	Resume *resume.Resume `json:"resume"`
}

func (q *Queries) InsertBase(ctx context.Context, arg InsertBaseParams) (BaseResume, error) {
	row := q.db.QueryRowContext(ctx, insertBase, arg.UserID, arg.Name, arg.Resume)
	var i BaseResume
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Resume,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastUsed,
		&i.DeletedAt,
	)
	return i, err
}

const softDeleteSession = `-- name: SoftDeleteSession :exec
UPDATE sessions 
SET deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE uuid = ? AND user_id = ? AND deleted_at IS NULL
`

type SoftDeleteSessionParams struct {
	Uuid   string `json:"uuid"`
	UserID int64  `json:"user_id"`
}

func (q *Queries) SoftDeleteSession(ctx context.Context, arg SoftDeleteSessionParams) error {
	_, err := q.db.ExecContext(ctx, softDeleteSession, arg.Uuid, arg.UserID)
	return err
}

const updateApplication = `-- name: UpdateApplication :one
UPDATE applications 
SET 
    applied_at = ?,
    status = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE user_id = ? AND id = ? AND deleted_at IS NULL
RETURNING id, user_id, base_resume_id, company, position, description, resume, status, applied_at, created_at, updated_at, deleted_at
`

type UpdateApplicationParams struct {
	AppliedAt time.Time `json:"applied_at"`
	Status    string    `json:"status"`
	UserID    int64     `json:"user_id"`
	ID        int64     `json:"id"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, updateApplication,
		arg.AppliedAt,
		arg.Status,
		arg.UserID,
		arg.ID,
	)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BaseResumeID,
		&i.Company,
		&i.Position,
		&i.Description,
		&i.Resume,
		&i.Status,
		&i.AppliedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
